kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
# Kind 集群名字
name: kind-example
featureGates:
  # 开启 CSIMigration 特性
  # 支持的所有 FeatureGate (https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/)
  # "CSIMigration": true

# 配置启动参数，所有启动参数 （https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/）
runtimeConfig:
  "api/alpha": "false"
networking:
  # 绑定到宿主机上的地址，需要外部访问需要设置宿主机 IP
  apiServerAddress: 192.168.0.100
  # 绑定到宿主机上的端口，如果建立集群或者宿主机已经占用需要修改
  apiServerPort: 6443
  # 设置 Pod 子网
  # 默认情况下，kind 对 IPv4 使用 10.244.0.0/16 pod 子网，对 IPv6 使用 fd00:10:244::/56 pod 子网
  podSubnet: "10.244.0.0/16"
  # 设置 Kubernetes Service 子网
  # 默认情况下，kind 对 IPv4 使用 10.96.0.0/16 服务子网，对 IPv6 使用 fd00:10:96::/112 服务子网。
  serviceSubnet: "10.96.0.0/12"
  # 设置集群网络模式为双栈，ipFamily 可用取值为 dual, ipv6, ipv4
  ipFamily: dual
  # 是否使用默认的 CNI 插件 kindnet
  # 你可以禁用默认的 CNI 插件，安装自己的 CNI 插件，这里我们使用默认的 CNI 插件
  disableDefaultCNI: false
  # kube-proxy 使用的网络模式，none 表示不需要 kube-proxy 组件
  kubeProxyMode: "ipvs"
# kubeadm 配置设置，以 Patch 方式来设置，详细（https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/control-plane-flags/）
# 可以设置 InitConfiguration, ClusterConfiguration, KubeProxyConfiguration, KubeletConfiguration
kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    networking:
      dnsDomain: "onex.io"
  - |
    apiVersion: kubelet.config.k8s.io/v1beta1
    kind: KubeletConfiguration
    # 开启 imageGC，防止磁盘空间被 image 占满
    # imageGCHighThresholdPercent: 80 # NOTICE: 该选项慎开启，可能导致创建多 worker 节点的集群失
    #evictionHard: # 不要打开，否则 nodes 可能 NotReady
    #nodefs.available: "0%"
    #nodefs.inodesFree: "0%"
    #imagefs.available: "90%"
nodes:
  # master 节点列表。一个列表元素，代表一个 Kubernetes 节点
- role: control-plane
  # 自定义节点使用的镜像及版本
  image: kindest/node:v1.28.0@sha256:dad5a6238c5e41d7cac405fae3b5eda2ad1de6f1190fa8bfc64ff5bb86173213
  kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    apiServer:
        extraArgs:
          # 自动创建命名空间
          enable-admission-plugins: NamespaceAutoProvision,NamespaceExists,NamespaceLifecycle
  # 宿主机和节点文件共享挂载
  extraMounts:
    # 宿主机目录
    - hostPath: /kind/onex
      # 节点数据目录
      containerPath: /data
      # 是否以只读方式挂载
      readOnly: false
      # 是否重新生成 SELinux 标签
      selinuxRelabel: false
      propagation: HostToContainer
      # 节点端口到宿主机端口映射
  extraPortMappings:
    # 节点端口 nodeport
    - containerPort: 32080 # 对应到 traefik web.nodePort
      # 宿主机端口
      hostPort: 18080
      # 宿主机端口监听地址，需要外部访问设置为"0.0.0.0"
      listenAddress: "0.0.0.0"
      # 通信协议
      protocol: TCP
    - containerPort: 32443 # 对应到 traefik websecure.nodePort
      hostPort: 18443
      listenAddress: "0.0.0.0"
      protocol: TCP
# worker 节点，配置同 master 节点
- role: worker
  labels:
    # 设置节点标签
    nodePool: onex
  image: kindest/node:v1.28.0@sha256:dad5a6238c5e41d7cac405fae3b5eda2ad1de6f1190fa8bfc64ff5bb86173213
- role: worker
  image: kindest/node:v1.28.0@sha256:dad5a6238c5e41d7cac405fae3b5eda2ad1de6f1190fa8bfc64ff5bb86173213
- role: worker
  image: kindest/node:v1.28.0@sha256:dad5a6238c5e41d7cac405fae3b5eda2ad1de6f1190fa8bfc64ff5bb86173213
